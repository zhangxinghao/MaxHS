// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: banyan_go_types.proto

#include "banyan_go_types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace banyan {
constexpr HardClause::HardClause(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lits_()
  , _lits_cached_byte_size_(0){}
struct HardClauseDefaultTypeInternal {
  constexpr HardClauseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HardClauseDefaultTypeInternal() {}
  union {
    HardClause _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HardClauseDefaultTypeInternal _HardClause_default_instance_;
constexpr SoftClause::SoftClause(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lits_()
  , _lits_cached_byte_size_(0)
  , weight_(0){}
struct SoftClauseDefaultTypeInternal {
  constexpr SoftClauseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SoftClauseDefaultTypeInternal() {}
  union {
    SoftClause _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SoftClauseDefaultTypeInternal _SoftClause_default_instance_;
constexpr Problem::Problem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hardclauses_()
  , softclauses_()
  , clusterid_(0)
  , numvars_(0)
  , numclauses_(0)
  , topweight_(0){}
struct ProblemDefaultTypeInternal {
  constexpr ProblemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProblemDefaultTypeInternal() {}
  union {
    Problem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProblemDefaultTypeInternal _Problem_default_instance_;
constexpr Problems::Problems(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : problems_(){}
struct ProblemsDefaultTypeInternal {
  constexpr ProblemsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProblemsDefaultTypeInternal() {}
  union {
    Problems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProblemsDefaultTypeInternal _Problems_default_instance_;
constexpr Result::Result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lits_()
  , _lits_cached_byte_size_(0)
  , status_(0){}
struct ResultDefaultTypeInternal {
  constexpr ResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResultDefaultTypeInternal() {}
  union {
    Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResultDefaultTypeInternal _Result_default_instance_;
constexpr Results_ClusterRstEntry_DoNotUse::Results_ClusterRstEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Results_ClusterRstEntry_DoNotUseDefaultTypeInternal {
  constexpr Results_ClusterRstEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Results_ClusterRstEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Results_ClusterRstEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Results_ClusterRstEntry_DoNotUseDefaultTypeInternal _Results_ClusterRstEntry_DoNotUse_default_instance_;
constexpr Results::Results(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clusterrst_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct ResultsDefaultTypeInternal {
  constexpr ResultsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResultsDefaultTypeInternal() {}
  union {
    Results _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResultsDefaultTypeInternal _Results_default_instance_;
}  // namespace banyan
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_banyan_5fgo_5ftypes_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_banyan_5fgo_5ftypes_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_banyan_5fgo_5ftypes_2eproto = nullptr;

const uint32_t TableStruct_banyan_5fgo_5ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::banyan::HardClause, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::banyan::HardClause, lits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::banyan::SoftClause, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::banyan::SoftClause, weight_),
  PROTOBUF_FIELD_OFFSET(::banyan::SoftClause, lits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::banyan::Problem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::banyan::Problem, clusterid_),
  PROTOBUF_FIELD_OFFSET(::banyan::Problem, numvars_),
  PROTOBUF_FIELD_OFFSET(::banyan::Problem, numclauses_),
  PROTOBUF_FIELD_OFFSET(::banyan::Problem, topweight_),
  PROTOBUF_FIELD_OFFSET(::banyan::Problem, hardclauses_),
  PROTOBUF_FIELD_OFFSET(::banyan::Problem, softclauses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::banyan::Problems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::banyan::Problems, problems_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::banyan::Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::banyan::Result, status_),
  PROTOBUF_FIELD_OFFSET(::banyan::Result, lits_),
  PROTOBUF_FIELD_OFFSET(::banyan::Results_ClusterRstEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::banyan::Results_ClusterRstEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::banyan::Results_ClusterRstEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::banyan::Results_ClusterRstEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::banyan::Results, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::banyan::Results, clusterrst_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::banyan::HardClause)},
  { 7, -1, -1, sizeof(::banyan::SoftClause)},
  { 15, -1, -1, sizeof(::banyan::Problem)},
  { 27, -1, -1, sizeof(::banyan::Problems)},
  { 34, -1, -1, sizeof(::banyan::Result)},
  { 42, 50, -1, sizeof(::banyan::Results_ClusterRstEntry_DoNotUse)},
  { 52, -1, -1, sizeof(::banyan::Results)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::banyan::_HardClause_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::banyan::_SoftClause_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::banyan::_Problem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::banyan::_Problems_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::banyan::_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::banyan::_Results_ClusterRstEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::banyan::_Results_default_instance_),
};

const char descriptor_table_protodef_banyan_5fgo_5ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025banyan_go_types.proto\022\006banyan\"\032\n\nHardC"
  "lause\022\014\n\004lits\030\002 \003(\005\"*\n\nSoftClause\022\016\n\006wei"
  "ght\030\001 \001(\005\022\014\n\004lits\030\002 \003(\005\"\246\001\n\007Problem\022\021\n\tc"
  "lusterId\030\001 \001(\005\022\017\n\007numVars\030\002 \001(\005\022\022\n\nnumCl"
  "auses\030\003 \001(\005\022\021\n\ttopWeight\030\004 \001(\005\022\'\n\013hardCl"
  "auses\030\005 \003(\0132\022.banyan.HardClause\022\'\n\013softC"
  "lauses\030\006 \003(\0132\022.banyan.SoftClause\"-\n\010Prob"
  "lems\022!\n\010problems\030\001 \003(\0132\017.banyan.Problem\""
  "&\n\006Result\022\016\n\006status\030\001 \001(\005\022\014\n\004lits\030\002 \003(\005\""
  "\201\001\n\007Results\0223\n\nclusterRst\030\001 \003(\0132\037.banyan"
  ".Results.ClusterRstEntry\032A\n\017ClusterRstEn"
  "try\022\013\n\003key\030\001 \001(\005\022\035\n\005value\030\002 \001(\0132\016.banyan"
  ".Result:\0028\001B\013Z\tbanyan/pab\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_banyan_5fgo_5ftypes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_banyan_5fgo_5ftypes_2eproto = {
  false, false, 512, descriptor_table_protodef_banyan_5fgo_5ftypes_2eproto, "banyan_go_types.proto", 
  &descriptor_table_banyan_5fgo_5ftypes_2eproto_once, nullptr, 0, 7,
  schemas, file_default_instances, TableStruct_banyan_5fgo_5ftypes_2eproto::offsets,
  file_level_metadata_banyan_5fgo_5ftypes_2eproto, file_level_enum_descriptors_banyan_5fgo_5ftypes_2eproto, file_level_service_descriptors_banyan_5fgo_5ftypes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_banyan_5fgo_5ftypes_2eproto_getter() {
  return &descriptor_table_banyan_5fgo_5ftypes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_banyan_5fgo_5ftypes_2eproto(&descriptor_table_banyan_5fgo_5ftypes_2eproto);
namespace banyan {

// ===================================================================

class HardClause::_Internal {
 public:
};

HardClause::HardClause(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  lits_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:banyan.HardClause)
}
HardClause::HardClause(const HardClause& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lits_(from.lits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:banyan.HardClause)
}

inline void HardClause::SharedCtor() {
}

HardClause::~HardClause() {
  // @@protoc_insertion_point(destructor:banyan.HardClause)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HardClause::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HardClause::ArenaDtor(void* object) {
  HardClause* _this = reinterpret_cast< HardClause* >(object);
  (void)_this;
}
void HardClause::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HardClause::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HardClause::Clear() {
// @@protoc_insertion_point(message_clear_start:banyan.HardClause)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HardClause::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 lits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_lits(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_lits(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HardClause::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:banyan.HardClause)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 lits = 2;
  {
    int byte_size = _lits_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_lits(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:banyan.HardClause)
  return target;
}

size_t HardClause::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:banyan.HardClause)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 lits = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->lits_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _lits_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HardClause::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HardClause::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HardClause::GetClassData() const { return &_class_data_; }

void HardClause::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HardClause *>(to)->MergeFrom(
      static_cast<const HardClause &>(from));
}


void HardClause::MergeFrom(const HardClause& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:banyan.HardClause)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  lits_.MergeFrom(from.lits_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HardClause::CopyFrom(const HardClause& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:banyan.HardClause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HardClause::IsInitialized() const {
  return true;
}

void HardClause::InternalSwap(HardClause* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  lits_.InternalSwap(&other->lits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HardClause::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_banyan_5fgo_5ftypes_2eproto_getter, &descriptor_table_banyan_5fgo_5ftypes_2eproto_once,
      file_level_metadata_banyan_5fgo_5ftypes_2eproto[0]);
}

// ===================================================================

class SoftClause::_Internal {
 public:
};

SoftClause::SoftClause(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  lits_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:banyan.SoftClause)
}
SoftClause::SoftClause(const SoftClause& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lits_(from.lits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  weight_ = from.weight_;
  // @@protoc_insertion_point(copy_constructor:banyan.SoftClause)
}

inline void SoftClause::SharedCtor() {
weight_ = 0;
}

SoftClause::~SoftClause() {
  // @@protoc_insertion_point(destructor:banyan.SoftClause)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SoftClause::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SoftClause::ArenaDtor(void* object) {
  SoftClause* _this = reinterpret_cast< SoftClause* >(object);
  (void)_this;
}
void SoftClause::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SoftClause::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SoftClause::Clear() {
// @@protoc_insertion_point(message_clear_start:banyan.SoftClause)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lits_.Clear();
  weight_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SoftClause::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 weight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 lits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_lits(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_lits(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SoftClause::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:banyan.SoftClause)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 weight = 1;
  if (this->_internal_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_weight(), target);
  }

  // repeated int32 lits = 2;
  {
    int byte_size = _lits_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_lits(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:banyan.SoftClause)
  return target;
}

size_t SoftClause::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:banyan.SoftClause)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 lits = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->lits_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _lits_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 weight = 1;
  if (this->_internal_weight() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_weight());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SoftClause::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SoftClause::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SoftClause::GetClassData() const { return &_class_data_; }

void SoftClause::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SoftClause *>(to)->MergeFrom(
      static_cast<const SoftClause &>(from));
}


void SoftClause::MergeFrom(const SoftClause& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:banyan.SoftClause)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  lits_.MergeFrom(from.lits_);
  if (from._internal_weight() != 0) {
    _internal_set_weight(from._internal_weight());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SoftClause::CopyFrom(const SoftClause& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:banyan.SoftClause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftClause::IsInitialized() const {
  return true;
}

void SoftClause::InternalSwap(SoftClause* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  lits_.InternalSwap(&other->lits_);
  swap(weight_, other->weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SoftClause::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_banyan_5fgo_5ftypes_2eproto_getter, &descriptor_table_banyan_5fgo_5ftypes_2eproto_once,
      file_level_metadata_banyan_5fgo_5ftypes_2eproto[1]);
}

// ===================================================================

class Problem::_Internal {
 public:
};

Problem::Problem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  hardclauses_(arena),
  softclauses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:banyan.Problem)
}
Problem::Problem(const Problem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hardclauses_(from.hardclauses_),
      softclauses_(from.softclauses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&clusterid_, &from.clusterid_,
    static_cast<size_t>(reinterpret_cast<char*>(&topweight_) -
    reinterpret_cast<char*>(&clusterid_)) + sizeof(topweight_));
  // @@protoc_insertion_point(copy_constructor:banyan.Problem)
}

inline void Problem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&clusterid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&topweight_) -
    reinterpret_cast<char*>(&clusterid_)) + sizeof(topweight_));
}

Problem::~Problem() {
  // @@protoc_insertion_point(destructor:banyan.Problem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Problem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Problem::ArenaDtor(void* object) {
  Problem* _this = reinterpret_cast< Problem* >(object);
  (void)_this;
}
void Problem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Problem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Problem::Clear() {
// @@protoc_insertion_point(message_clear_start:banyan.Problem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hardclauses_.Clear();
  softclauses_.Clear();
  ::memset(&clusterid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&topweight_) -
      reinterpret_cast<char*>(&clusterid_)) + sizeof(topweight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Problem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 clusterId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          clusterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 numVars = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          numvars_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 numClauses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          numclauses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 topWeight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          topweight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .banyan.HardClause hardClauses = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hardclauses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .banyan.SoftClause softClauses = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_softclauses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Problem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:banyan.Problem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 clusterId = 1;
  if (this->_internal_clusterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_clusterid(), target);
  }

  // int32 numVars = 2;
  if (this->_internal_numvars() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_numvars(), target);
  }

  // int32 numClauses = 3;
  if (this->_internal_numclauses() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_numclauses(), target);
  }

  // int32 topWeight = 4;
  if (this->_internal_topweight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_topweight(), target);
  }

  // repeated .banyan.HardClause hardClauses = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hardclauses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_hardclauses(i), target, stream);
  }

  // repeated .banyan.SoftClause softClauses = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_softclauses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_softclauses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:banyan.Problem)
  return target;
}

size_t Problem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:banyan.Problem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .banyan.HardClause hardClauses = 5;
  total_size += 1UL * this->_internal_hardclauses_size();
  for (const auto& msg : this->hardclauses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .banyan.SoftClause softClauses = 6;
  total_size += 1UL * this->_internal_softclauses_size();
  for (const auto& msg : this->softclauses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 clusterId = 1;
  if (this->_internal_clusterid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_clusterid());
  }

  // int32 numVars = 2;
  if (this->_internal_numvars() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_numvars());
  }

  // int32 numClauses = 3;
  if (this->_internal_numclauses() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_numclauses());
  }

  // int32 topWeight = 4;
  if (this->_internal_topweight() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_topweight());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Problem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Problem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Problem::GetClassData() const { return &_class_data_; }

void Problem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Problem *>(to)->MergeFrom(
      static_cast<const Problem &>(from));
}


void Problem::MergeFrom(const Problem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:banyan.Problem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  hardclauses_.MergeFrom(from.hardclauses_);
  softclauses_.MergeFrom(from.softclauses_);
  if (from._internal_clusterid() != 0) {
    _internal_set_clusterid(from._internal_clusterid());
  }
  if (from._internal_numvars() != 0) {
    _internal_set_numvars(from._internal_numvars());
  }
  if (from._internal_numclauses() != 0) {
    _internal_set_numclauses(from._internal_numclauses());
  }
  if (from._internal_topweight() != 0) {
    _internal_set_topweight(from._internal_topweight());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Problem::CopyFrom(const Problem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:banyan.Problem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Problem::IsInitialized() const {
  return true;
}

void Problem::InternalSwap(Problem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  hardclauses_.InternalSwap(&other->hardclauses_);
  softclauses_.InternalSwap(&other->softclauses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Problem, topweight_)
      + sizeof(Problem::topweight_)
      - PROTOBUF_FIELD_OFFSET(Problem, clusterid_)>(
          reinterpret_cast<char*>(&clusterid_),
          reinterpret_cast<char*>(&other->clusterid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Problem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_banyan_5fgo_5ftypes_2eproto_getter, &descriptor_table_banyan_5fgo_5ftypes_2eproto_once,
      file_level_metadata_banyan_5fgo_5ftypes_2eproto[2]);
}

// ===================================================================

class Problems::_Internal {
 public:
};

Problems::Problems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  problems_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:banyan.Problems)
}
Problems::Problems(const Problems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      problems_(from.problems_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:banyan.Problems)
}

inline void Problems::SharedCtor() {
}

Problems::~Problems() {
  // @@protoc_insertion_point(destructor:banyan.Problems)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Problems::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Problems::ArenaDtor(void* object) {
  Problems* _this = reinterpret_cast< Problems* >(object);
  (void)_this;
}
void Problems::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Problems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Problems::Clear() {
// @@protoc_insertion_point(message_clear_start:banyan.Problems)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  problems_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Problems::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .banyan.Problem problems = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_problems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Problems::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:banyan.Problems)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .banyan.Problem problems = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_problems_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_problems(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:banyan.Problems)
  return target;
}

size_t Problems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:banyan.Problems)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .banyan.Problem problems = 1;
  total_size += 1UL * this->_internal_problems_size();
  for (const auto& msg : this->problems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Problems::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Problems::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Problems::GetClassData() const { return &_class_data_; }

void Problems::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Problems *>(to)->MergeFrom(
      static_cast<const Problems &>(from));
}


void Problems::MergeFrom(const Problems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:banyan.Problems)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  problems_.MergeFrom(from.problems_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Problems::CopyFrom(const Problems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:banyan.Problems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Problems::IsInitialized() const {
  return true;
}

void Problems::InternalSwap(Problems* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  problems_.InternalSwap(&other->problems_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Problems::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_banyan_5fgo_5ftypes_2eproto_getter, &descriptor_table_banyan_5fgo_5ftypes_2eproto_once,
      file_level_metadata_banyan_5fgo_5ftypes_2eproto[3]);
}

// ===================================================================

class Result::_Internal {
 public:
};

Result::Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  lits_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:banyan.Result)
}
Result::Result(const Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lits_(from.lits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:banyan.Result)
}

inline void Result::SharedCtor() {
status_ = 0;
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:banyan.Result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Result::ArenaDtor(void* object) {
  Result* _this = reinterpret_cast< Result* >(object);
  (void)_this;
}
void Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:banyan.Result)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lits_.Clear();
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 lits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_lits(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_lits(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Result::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:banyan.Result)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // repeated int32 lits = 2;
  {
    int byte_size = _lits_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_lits(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:banyan.Result)
  return target;
}

size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:banyan.Result)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 lits = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->lits_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _lits_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Result::GetClassData() const { return &_class_data_; }

void Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Result *>(to)->MergeFrom(
      static_cast<const Result &>(from));
}


void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:banyan.Result)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  lits_.MergeFrom(from.lits_);
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:banyan.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  return true;
}

void Result::InternalSwap(Result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  lits_.InternalSwap(&other->lits_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_banyan_5fgo_5ftypes_2eproto_getter, &descriptor_table_banyan_5fgo_5ftypes_2eproto_once,
      file_level_metadata_banyan_5fgo_5ftypes_2eproto[4]);
}

// ===================================================================

Results_ClusterRstEntry_DoNotUse::Results_ClusterRstEntry_DoNotUse() {}
Results_ClusterRstEntry_DoNotUse::Results_ClusterRstEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Results_ClusterRstEntry_DoNotUse::MergeFrom(const Results_ClusterRstEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Results_ClusterRstEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_banyan_5fgo_5ftypes_2eproto_getter, &descriptor_table_banyan_5fgo_5ftypes_2eproto_once,
      file_level_metadata_banyan_5fgo_5ftypes_2eproto[5]);
}

// ===================================================================

class Results::_Internal {
 public:
};

Results::Results(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  clusterrst_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:banyan.Results)
}
Results::Results(const Results& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clusterrst_.MergeFrom(from.clusterrst_);
  // @@protoc_insertion_point(copy_constructor:banyan.Results)
}

inline void Results::SharedCtor() {
}

Results::~Results() {
  // @@protoc_insertion_point(destructor:banyan.Results)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Results::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Results::ArenaDtor(void* object) {
  Results* _this = reinterpret_cast< Results* >(object);
  (void)_this;
  _this->clusterrst_. ~MapField();
}
inline void Results::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Results::ArenaDtor);
  }
}
void Results::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Results::Clear() {
// @@protoc_insertion_point(message_clear_start:banyan.Results)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clusterrst_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Results::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, .banyan.Result> clusterRst = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&clusterrst_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Results::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:banyan.Results)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .banyan.Result> clusterRst = 1;
  if (!this->_internal_clusterrst().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::banyan::Result >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< int32_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_clusterrst().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_clusterrst().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::banyan::Result >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::banyan::Result >::const_iterator
          it = this->_internal_clusterrst().begin();
          it != this->_internal_clusterrst().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Results_ClusterRstEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::banyan::Result >::const_iterator
          it = this->_internal_clusterrst().begin();
          it != this->_internal_clusterrst().end(); ++it) {
        target = Results_ClusterRstEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:banyan.Results)
  return target;
}

size_t Results::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:banyan.Results)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .banyan.Result> clusterRst = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_clusterrst_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::banyan::Result >::const_iterator
      it = this->_internal_clusterrst().begin();
      it != this->_internal_clusterrst().end(); ++it) {
    total_size += Results_ClusterRstEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Results::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Results::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Results::GetClassData() const { return &_class_data_; }

void Results::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Results *>(to)->MergeFrom(
      static_cast<const Results &>(from));
}


void Results::MergeFrom(const Results& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:banyan.Results)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  clusterrst_.MergeFrom(from.clusterrst_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Results::CopyFrom(const Results& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:banyan.Results)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Results::IsInitialized() const {
  return true;
}

void Results::InternalSwap(Results* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  clusterrst_.InternalSwap(&other->clusterrst_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Results::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_banyan_5fgo_5ftypes_2eproto_getter, &descriptor_table_banyan_5fgo_5ftypes_2eproto_once,
      file_level_metadata_banyan_5fgo_5ftypes_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace banyan
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::banyan::HardClause* Arena::CreateMaybeMessage< ::banyan::HardClause >(Arena* arena) {
  return Arena::CreateMessageInternal< ::banyan::HardClause >(arena);
}
template<> PROTOBUF_NOINLINE ::banyan::SoftClause* Arena::CreateMaybeMessage< ::banyan::SoftClause >(Arena* arena) {
  return Arena::CreateMessageInternal< ::banyan::SoftClause >(arena);
}
template<> PROTOBUF_NOINLINE ::banyan::Problem* Arena::CreateMaybeMessage< ::banyan::Problem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::banyan::Problem >(arena);
}
template<> PROTOBUF_NOINLINE ::banyan::Problems* Arena::CreateMaybeMessage< ::banyan::Problems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::banyan::Problems >(arena);
}
template<> PROTOBUF_NOINLINE ::banyan::Result* Arena::CreateMaybeMessage< ::banyan::Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::banyan::Result >(arena);
}
template<> PROTOBUF_NOINLINE ::banyan::Results_ClusterRstEntry_DoNotUse* Arena::CreateMaybeMessage< ::banyan::Results_ClusterRstEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::banyan::Results_ClusterRstEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::banyan::Results* Arena::CreateMaybeMessage< ::banyan::Results >(Arena* arena) {
  return Arena::CreateMessageInternal< ::banyan::Results >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
